#include<stdio.h>//
/*//用代码定义一个单链表 
typedef struct LNode{    //定义单链表节点类型 
	int data;            //每个节点存放一个数据元素 
	struct LNode *next;	 //指针指向下一个节点 
}; 
struct LNode*p=(struct LNode*)malloc(sizeof(struct LNode));//增加一个新的节点，在内存中申请一个节点所需空间，并用指针p指向这个节点
//typedef  <数据类型><别名>  数据类型重命名*/ 
//---------------------------------------------------------------------------------------------------
/*//不带头结点的单链表
typedef struct LNode{    //定义单链表的节点类型 
	int data;             //每个节点存放一个数据元素 
	struct LNode *next;   //指针指向下一个节点 
}LNode,*LinkList; 
//初始化一个空的单链表
bool InitList(LinkList &L){
	L=NULL;                  //空表，暂时还没有任何节点 ，防止脏数据 
	return true;
} 
//判断单链表是否为空
bool Empty (LinkList L){
	if(L==NULL);
    	return true;
	else
	    return false;
	
} 
void test(){
	LinkList L;  //声明一个指向单链表的指针
	//初始化一个空表 
	InitList(L);
	//。。。。后续代码 
}*//*
//--------------------------------------------------------------- 
//带头节点的单链表 
typedef struct LNode{    //定义单链表的节点类型 
	int data;             //每个节点存放一个数据元素 
	struct LNode *next;   //指针指向下一个节点 
}LNode,*LinkList; 
//初始化一个空的单链表(带头节点） 
bool InitList(LinkList &L){
	L=(LNode*)malloc(sizeof(LNode));//分配一个头节点 
    if(L==NULL);                  //内存不足，分配失败 
	return false;
	L->next=NULL;//头节点之后暂时还没有节点
	return true; 
} 
//判断单链表是否为空(带头节点） 
bool Empty (LinkList L){
	if(L->next==NULL)
		return true;
	else
	    return false; 
} 
void test{
	LinkList L;  //声明一个指向单链表的指针
	//初始化一个空表 
	InitList(L);
	//。。。。后续代码 
}*/
//---------------------------------------------------------------
/*//按位序插入（带头节点）
//在第i个位置插入元素e（带头节点）
bool ListInsert(LinkList &L,int i,ElemType e) {
	if(i<1)
		return false;
	LNode *p;    //指针p指向当前扫描到的节点 
	int j=0;     //当前p指向的是第几个节点 
	p=L;           //L指向头节点，头节点是第0个节点（不存数据） 
	while(p!=NULL&&j<i-1){  //循环找到第i-1个节点 
		p=p->next;
		j++;
	}	
	if(p==NULL)//i值不合法
	 	return false;
	LNode*s=(LNode*)malloc(sizeof(LNode));
	s->data=e;
	s->next=p->next;
	p->next=s;//将节点s连到p之后 
	return true; //插入成功 
}
*/ 
//-------------------------------------------------------------------------
//按位序插入（不带头结点）
 bool ListInsert(LinkList &L,int i,ElemType e) {
	if(i<1)
		return false;
	if(i==1){//插入第i个结点的操作与其他节点操作不同 
		LNode*s=(LNode*)malloc(sizeof(LNode));
		s->data=e;
		s->next=L; 
		L=s;//头指针指向新节点 
		return true; //插入成功 
	}
	LNode *p;    //指针p指向当前扫描到的节点 
	int j=0;     //当前p指向的是第几个节点 
	p=L;           //L指向头节点，头节点是第0个节点（不存数据） 
	while(p!=NULL&&j<i-1){  //循环找到第i-1个节点 
		p=p->next;
		j++;
	}	
	if(p==NULL)//i值不合法
	 	return false;
	LNode*s=(LNode*)malloc(sizeof(LNode));
	s->data=e;
	s->next=p->next;
	p->next=s;//将节点s连到p之后 
	return true; //插入成功 
}
*/ 
//-------------------------------------------------------------------------
//指定节点的后插操作
//后插操作 在p节点后插入元素e
  bool InsertNextNode(LNode*p,ElemType e) {
	if(p==NULL)//i值不合法
	 	return false;
	LNode*s=(LNode*)malloc(sizeof(LNode));
	if(s==NULL)//内存分配失败 
	 	return false;
	s->data=e;   // 用节点s保存数据元素e 
	s->next=p->next;
	p->next=s;   //将节点s连到p之后 
	return true; //插入成功 
}
//-------------------------------------------------------------------------
//指定节点的前插操作
//前插操作 在p节点前插入元素e 
 bool InsertNextNode(LNode*p,ElemType e) {
	if(p==NULL)//i值不合法
	 	return false;
	LNode*s=(LNode*)malloc(sizeof(LNode));
	if(s==NULL)//内存分配失败 
	 	return false;
	s->next=p->next;
	p->next=s;   //新节点s连到p之后 
	s->data=p->data;   // 将p中元素复制到s中
	p->data=e //p中元素覆盖为e 
	return true; //插入成功 
}
//-------------------------------------------------------------------------------------
//按位序删除 
bool ListDelete(LinkList &L,int i,ElemType &e) {
	if(i<1)
		return false;
	LNode *p;    //指针p指向当前扫描到的节点 
	int j=0;     //当前p指向的是第几个节点 
	p=L;           //L指向头节点，头节点是第0个节点（不存数据） 
	while(p!=NULL&&j<i-1){  //循环找到第i-1个节点 
		p=p->next;
		j++;
	}	
	if(p==NULL)//i值不合法
	 	return false;
	if(p->next==NULL)//第i-1个节点之后已无其他节点 
	 	return false;
	LNode*q=p->next; //令q指向被删除节点 
	e=q->data;        //用e返回元素的值 
	p->next=q->next;    //将*p节点从链中断开 
	free(q);          //释放节点的存储空间 
	return true; //删除成功 
}
//-----------------------------------------------------------------------------------------
//指定节点的删除
//删除指定节点p
bool DeleteNode(LNode*p){
	if(p==NULL)
		return false;
	LNode *q=p->next;      //令q指向*p的后继节点 
	p->data=p->next->data; //和后继结点交换数据域 
	p->next=q->next;       //将*q节点从链中断开 
	free(q);               //释放后继结点的存储空间 
	return true;
} 
//----------------------------------------------------------------------------------------------
//按位查找,返回第i个元素 
LNode*GetElem(LinkList L,int i) {
    if(i<0)
	 	return NULL;
	LNode*p;//指针p指向当前扫描到的节点 
    int j=0;  //当前p指向的是第几个节点 
	p=L;           //L指向头节点，头节点是第0个节点（不存数据） 
	while(p!=NULL&&j<i){  //循环找到第i个节点 
		p=p->next;
		j++;
	}
	return p;
}
//---------------------------------------------------------------------------------------------- 
//按值查找，找到数据域==e的节点
LNode*LocateElem(LinkList L,ElemType e) {
	LNode*p=L->next;
	//从第1个节点开始查找数据域为e的节点
	whlie(p!=NULL&&p->data!=e)
	    p=p->next; 
	return p;     //找到后返回该结点指针，否则返回NULL
}
//---------------------------------------------------------------------------------
//求表的长度
int Length(LinkList L){
	int len=0;//统计表长
	LNode*p=L;
	while(p->next!=NULL){
		p=p->next;
		len++;
	} 
	return len;
} 
//-------------------------------------------------------------------------------------
/*尾插法建立单链表
1.初始化单链表
2，设置变量length记录链表长度
3，按位序插入后插操作 
 /*头插法    从头节点后插操作 
